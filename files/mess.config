// MESS configuration file.
// The settings in this file are used as default settings, but most of them can be overridden with command-line arguments.


// Where to look for template maps (when using relative template map paths).
// The path can contain MScript expressions, and the following bindings are available:
//   EXE_DIR    The directory where MESS.exe is located.
template-directory:     {EXE_DIR}\templates


// The maximum recursion depth (recursion is when a template inserts another template). This is a failsafe to prevent accidental infinite recursion.
// Feel free to increase this if you know what you're doing:
max-recursion:      100


// The maximum number of template instances to create. This is a failsafe to prevent accidental infinite loops.
// Feel free to increase this if you know what you're doing:
max-instances:      10000


// The default log level. Available levels are:
//   off        All logging is disabled.
//   minimal    Only a startup and finish message are logged.
//   error      Errors that prevent MESS from continuing will also be logged.
//   warning    Failures that cause MESS to skip certain steps will also be logged.
//   info       Additional information is logged, such as which template maps are being loaded.
//   verbose    Extra information is logged for each instance and entity that is being created.
log-level:          info


// Rewrite rules allow you to create custom entity definitions for your templates.
// You can add multiple .fgds here (on separate lines).
// Each path can contain MScript expressions, and the following bindings are available:
//   EXE_DIR    The directory where MESS.exe is located.
rewrite-fgds:
    //{EXE_DIR}\examples\MESS_rewrite_rule_examples.fgd


// These variables will be available in MScript expressions in the map properties and top-level entities of the input map.
// This can be useful for things like setting an author name, or for setting wad paths when compiling .rmf/.jmf files directly.
// You can add multiple variable assignments here (on separate lines):
variables:
    var1 = 'raw text value'
    var2 = 4 + 5


// Most Half-Life entities with positive pitch will face downwards. However, some entities (anything that displays a model, and a few others) will face upwards instead.
// Instead of hard-coding a list of entities, MESS lets you write a predicate (which can contain MScript expressions) that will be evaluated for every non-macro entity in a map.
// If the predicate produces a 'true' value (anything except for an empty string or 0) then MESS will use inverted-pitch logic for that entity.
// The entity's classname is the most important attribute to check, but all of the entity's attributes can be used within expressions here:
inverted-pitch-predicate:       {classname.startswith('ammo_') or classname.startswith('item_') or classname.startswith('weapon_') or classname.startswith('cycler') or classname.startswith('monster_') or classname.startswith('xen_') or classname.startswith('light_')
